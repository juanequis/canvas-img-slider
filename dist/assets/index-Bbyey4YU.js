(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))n(e);new MutationObserver(e=>{for(const s of e)if(s.type==="childList")for(const o of s.addedNodes)o.tagName==="LINK"&&o.rel==="modulepreload"&&n(o)}).observe(document,{childList:!0,subtree:!0});function i(e){const s={};return e.integrity&&(s.integrity=e.integrity),e.referrerPolicy&&(s.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?s.credentials="include":e.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(e){if(e.ep)return;e.ep=!0;const s=i(e);fetch(e.href,s)}})();class l{imagePaths;images=[];constructor(t){this.imagePaths=t}async loadImages(){for(const t of this.imagePaths){const i=new Image;i.src=t;try{await new Promise((n,e)=>{i.onload=n,i.onerror=e}),this.images.push(i)}catch{console.error(`Failed to load image: ${t}`)}}return this.images}}class g{canvas;ctx;constructor(t){this.canvas=t,this.ctx=t.getContext("2d")}drawImages(t,i){this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);let n=i;t.forEach(e=>{const s=e.width/e.height;let o=this.canvas.width,a=this.canvas.width/s;a>this.canvas.height&&(a=this.canvas.height,o=this.canvas.height*s);const d=(this.canvas.height-a)/2,u=n+(this.canvas.width-o)/2;this.ctx.drawImage(e,u,d,o,a),n+=this.canvas.width})}}class m{canvas;renderer;loader;images=[];offsetX=0;isDragging=!1;startX=0;boundOnMouseDown;boundOnMouseMove;boundOnMouseUp;constructor(t,i){this.canvas=t,this.renderer=new g(t),this.loader=new l(i),this.boundOnMouseDown=this.onMouseDown.bind(this),this.boundOnMouseMove=this.onMouseMove.bind(this),this.boundOnMouseUp=this.onMouseUp.bind(this),this.attachEventListeners(),this.initialize()}async initialize(){this.images=await this.loader.loadImages(),this.renderer.drawImages(this.images,this.offsetX)}attachEventListeners(){this.canvas.addEventListener("mousedown",this.boundOnMouseDown),window.addEventListener("mousemove",this.boundOnMouseMove),window.addEventListener("mouseup",this.boundOnMouseUp)}destroy(){this.canvas.removeEventListener("mousedown",this.boundOnMouseDown),window.removeEventListener("mousemove",this.boundOnMouseMove),window.removeEventListener("mouseup",this.boundOnMouseUp)}onMouseDown(t){this.isDragging=!0,this.startX=t.clientX}onMouseMove(t){if(!this.isDragging)return;const i=t.clientX,n=i-this.startX;this.startX=i;const e=this.canvas.width*this.images.length,s=0,o=this.canvas.width-e;this.offsetX=Math.min(s,Math.max(o,this.offsetX+n)),this.renderer.drawImages(this.images,this.offsetX)}onMouseUp(){this.isDragging=!1}}const h=document.querySelector("#app");if(!h)throw new Error("App element (#app) not found");h.innerHTML=`
  <h1>Canvas Image Slider</h1>
  <canvas id="image-slider" width="640" height="400"></canvas>
  <small class="slider-instruction">Drag to change image</small>
`;const c=document.querySelector("#image-slider");if(!c)throw new Error("Canvas element (#image-slider) not found");const f=["/0.jpg","/1.jpg","/2.jpg","/3.jpg"],w=new m(c,f);window.addEventListener("beforeunload",()=>{w.destroy()});
